discovery_pairs <- expand.grid(
response_id = gene_list,
grna_target = "enhancer"
)
# set parameter
sceptre_object <- sceptre::set_analysis_parameters(
sceptre_object = sceptre_object,
discovery_pairs = discovery_pairs,
grna_integration_strategy = "union",
control_group = "complement",
resampling_mechanism = "permutations",
side = "left",
formula_object = formula(~ 1)
) |> sceptre::assign_grnas(method = "thresholding", threshold = 1) |>
sceptre::run_qc(
n_nonzero_trt_thresh = 0,
n_nonzero_cntrl_thresh = 0,
response_n_umis_range = c(0, 1),
response_n_nonzero_range = c(0, 1),
p_mito_threshold = 1,
)
# run_discovery_analysis for sceptre_object
sceptre_object <- sceptre::run_discovery_analysis(sceptre_object)
# select the n_nonzero_trt, n_nonzero_ctrl, p-value, response_id and grna_target
sceptre_discovery_result <- sceptre_object@discovery_result |>
dplyr::select(response_id,
grna_target,
n_nonzero_trt,
n_nonzero_cntrl,
p_value)
# merge the result_df
pvalue_vec <- result_df |>
merge(sceptre_discovery_result, by = c("response_id")) |>
dplyr::select(p_value) |> dplyr::pull()
names(pvalue_vec) <- gene_list
# print the p-value
print(pvalue_vec[problematic_gene])
###################################### perform sceptre #########################
# load data
problematic_data <- readRDS("problematic_data.rds")
nc_data <- problematic_data$nc_data
discover_data <- problematic_data$discover_data
num_discover <- nrow(discover_data)
num_ncontrol <- nrow(nc_data)
# logic value if only problematic gene is used
only_problematic_gene <- FALSE
# define problematic gene
problematic_gene <- c("ENSG00000065268", "ENSG00000102931", "ENSG00000106976",
"ENSG00000108312", "ENSG00000135046", "ENSG00000167491",
"ENSG00000250067")
# subset the gene count if only considering th problematic genes
if(only_problematic_gene){
nc_data <- nc_data[, problematic_gene]
discover_data <- discover_data[, problematic_gene]
gene_list <- problematic_gene
}
# create the empty dataframe
result_df <- expand.grid(
response_id = gene_list,
grna_target = "enhancer"
)
library(dplyr)
set.seed(10)
# summary information
gene_expression_summary <- readRDS("gene_expression_summary.rds")
effect_size <- log(0.85)
num_cell <- 56000
num_discover <- 50
num_ncontrol <- num_cell - num_discover
# with all genes
mean_expression <- gene_expression_summary$mean
size_parameter <- 1 / gene_expression_summary$dispersion
num_gene <- length(mean_expression)
# specify the full gene list
gene_list <- gene_expression_summary$ensembl
# generate negative control gene expression
nc_data <- Matrix::Matrix(rnbinom(num_ncontrol * num_gene,
mu = rep(mean_expression, each = num_ncontrol),
size = rep(size_parameter, each = num_ncontrol)),
ncol = num_gene, sparse = TRUE)
# generate observed perturbed expression
discover_data <- Matrix::Matrix(rnbinom(num_discover * num_gene,
mu = rep(exp(effect_size) * mean_expression, each = num_discover),
size = rep(size_parameter, each = num_discover)),
ncol = num_gene, sparse = TRUE)
# rename the column
colnames(nc_data) <- gene_list
colnames(discover_data) <- gene_list
# save data frame
saveRDS(list(nc_data = nc_data, discover_data = discover_data, gene_list = gene_list),
"problematic_data.rds")
###################################### perform sceptre #########################
# load data
problematic_data <- readRDS("problematic_data.rds")
nc_data <- problematic_data$nc_data
discover_data <- problematic_data$discover_data
gene_list <- problematic_data$gene_list
num_discover <- nrow(discover_data)
num_ncontrol <- nrow(nc_data)
# logic value if only problematic gene is used
only_problematic_gene <- FALSE
# define problematic gene
problematic_gene <- c("ENSG00000065268", "ENSG00000102931", "ENSG00000106976",
"ENSG00000108312", "ENSG00000135046", "ENSG00000167491",
"ENSG00000250067")
# subset the gene count if only considering th problematic genes
if(only_problematic_gene){
nc_data <- nc_data[, problematic_gene]
discover_data <- discover_data[, problematic_gene]
gene_list <- problematic_gene
}
# create the empty dataframe
result_df <- expand.grid(
response_id = gene_list,
grna_target = "enhancer"
)
# construct the grna_group_data_frame
grna_group_data_frame <- data.frame(
grna_id = "enhancer",
grna_target = "enhancer"
)
# construct the grna matrix
grna_mat <- Matrix::Matrix(c(rep(1, num_discover), rep(0, num_ncontrol)),
nrow = 1, dimnames = list(
grna = "enhancer",
cell = NULL
))
num_discover
nrow(discover_data)
nrow(nc_data)
# load data
problematic_data <- readRDS("problematic_data.rds")
nc_data <- problematic_data$nc_data
discover_data <- problematic_data$discover_data
gene_list <- problematic_data$gene_list
num_discover <- nrow(discover_data)
num_ncontrol <- nrow(nc_data)
# logic value if only problematic gene is used
only_problematic_gene <- FALSE
# define problematic gene
problematic_gene <- c("ENSG00000065268", "ENSG00000102931", "ENSG00000106976",
"ENSG00000108312", "ENSG00000135046", "ENSG00000167491",
"ENSG00000250067")
# subset the gene count if only considering th problematic genes
if(only_problematic_gene){
nc_data <- nc_data[, problematic_gene]
discover_data <- discover_data[, problematic_gene]
gene_list <- problematic_gene
}
# create the empty dataframe
result_df <- expand.grid(
response_id = gene_list,
grna_target = "enhancer"
)
# construct the grna_group_data_frame
grna_group_data_frame <- data.frame(
grna_id = "enhancer",
grna_target = "enhancer"
)
# construct the grna matrix
grna_mat <- Matrix::Matrix(c(rep(1, num_discover), rep(0, num_ncontrol)),
nrow = 1, dimnames = list(
grna = "enhancer",
cell = NULL
))
# create the sceptre object
sceptre_object <- sceptre::import_data(response_matrix = Matrix::t(rbind(discover_data, nc_data)),
grna_matrix = grna_mat,
grna_target_data_frame = grna_group_data_frame,
moi = "high")
# obtain the response_id versus grna_target pairs
discovery_pairs <- expand.grid(
response_id = gene_list,
grna_target = "enhancer"
)
# set parameter
sceptre_object <- sceptre::set_analysis_parameters(
sceptre_object = sceptre_object,
discovery_pairs = discovery_pairs,
grna_integration_strategy = "union",
control_group = "complement",
resampling_mechanism = "permutations",
side = "left",
formula_object = formula(~ 1)
) |> sceptre::assign_grnas(method = "thresholding", threshold = 1) |>
sceptre::run_qc(
n_nonzero_trt_thresh = 0,
n_nonzero_cntrl_thresh = 0,
response_n_umis_range = c(0, 1),
response_n_nonzero_range = c(0, 1),
p_mito_threshold = 1,
)
# run_discovery_analysis for sceptre_object
sceptre_object <- sceptre::run_discovery_analysis(sceptre_object)
# select the n_nonzero_trt, n_nonzero_ctrl, p-value, response_id and grna_target
sceptre_discovery_result <- sceptre_object@discovery_result |>
dplyr::select(response_id,
grna_target,
n_nonzero_trt,
n_nonzero_cntrl,
p_value)
# merge the result_df
pvalue_vec <- result_df |>
merge(sceptre_discovery_result, by = c("response_id")) |>
dplyr::select(p_value) |> dplyr::pull()
names(pvalue_vec) <- gene_list
# print the p-value
print(pvalue_vec[problematic_gene])
###################################### perform sceptre #########################
# load data
problematic_data <- readRDS("problematic_data.rds")
nc_data <- problematic_data$nc_data
discover_data <- problematic_data$discover_data
gene_list <- problematic_data$gene_list
num_discover <- nrow(discover_data)
num_ncontrol <- nrow(nc_data)
# logic value if only problematic gene is used
only_problematic_gene <- FALSE
# define problematic gene
problematic_gene <- c("ENSG00000065268", "ENSG00000102931", "ENSG00000106976",
"ENSG00000108312", "ENSG00000135046", "ENSG00000167491",
"ENSG00000250067")
# subset the gene count if only considering th problematic genes
if(only_problematic_gene){
nc_data <- nc_data[, problematic_gene]
discover_data <- discover_data[, problematic_gene]
gene_list <- problematic_gene
}
# create the empty dataframe
result_df <- expand.grid(
response_id = gene_list,
grna_target = "enhancer"
)
# construct the grna_group_data_frame
grna_group_data_frame <- data.frame(
grna_id = "enhancer",
grna_target = "enhancer"
)
# construct the grna matrix
grna_mat <- Matrix::Matrix(c(rep(1, num_discover), rep(0, num_ncontrol)),
nrow = 1, dimnames = list(
grna = "enhancer",
cell = NULL
))
nrow(discover_data)
###################################### perform sceptre #########################
library(Matrix)
# load data
problematic_data <- readRDS("problematic_data.rds")
nc_data <- problematic_data$nc_data
discover_data <- problematic_data$discover_data
gene_list <- problematic_data$gene_list
num_discover <- nrow(discover_data)
num_ncontrol <- nrow(nc_data)
###################################### perform sceptre #########################
library(Matrix)
# load data
problematic_data <- readRDS("problematic_data.rds")
nc_data <- problematic_data$nc_data
discover_data <- problematic_data$discover_data
gene_list <- problematic_data$gene_list
num_discover <- nrow(discover_data)
num_ncontrol <- nrow(nc_data)
# logic value if only problematic gene is used
only_problematic_gene <- FALSE
# define problematic gene
problematic_gene <- c("ENSG00000065268", "ENSG00000102931", "ENSG00000106976",
"ENSG00000108312", "ENSG00000135046", "ENSG00000167491",
"ENSG00000250067")
# subset the gene count if only considering th problematic genes
if(only_problematic_gene){
nc_data <- nc_data[, problematic_gene]
discover_data <- discover_data[, problematic_gene]
gene_list <- problematic_gene
}
# create the empty dataframe
result_df <- expand.grid(
response_id = gene_list,
grna_target = "enhancer"
)
# construct the grna_group_data_frame
grna_group_data_frame <- data.frame(
grna_id = "enhancer",
grna_target = "enhancer"
)
# construct the grna matrix
grna_mat <- Matrix::Matrix(c(rep(1, num_discover), rep(0, num_ncontrol)),
nrow = 1, dimnames = list(
grna = "enhancer",
cell = NULL
))
# create the sceptre object
sceptre_object <- sceptre::import_data(response_matrix = Matrix::t(rbind(discover_data, nc_data)),
grna_matrix = grna_mat,
grna_target_data_frame = grna_group_data_frame,
moi = "high")
# obtain the response_id versus grna_target pairs
discovery_pairs <- expand.grid(
response_id = gene_list,
grna_target = "enhancer"
)
# set parameter
sceptre_object <- sceptre::set_analysis_parameters(
sceptre_object = sceptre_object,
discovery_pairs = discovery_pairs,
grna_integration_strategy = "union",
control_group = "complement",
resampling_mechanism = "permutations",
side = "left",
formula_object = formula(~ 1)
) |> sceptre::assign_grnas(method = "thresholding", threshold = 1) |>
sceptre::run_qc(
n_nonzero_trt_thresh = 0,
n_nonzero_cntrl_thresh = 0,
response_n_umis_range = c(0, 1),
response_n_nonzero_range = c(0, 1),
p_mito_threshold = 1,
)
# run_discovery_analysis for sceptre_object
sceptre_object <- sceptre::run_discovery_analysis(sceptre_object)
# select the n_nonzero_trt, n_nonzero_ctrl, p-value, response_id and grna_target
sceptre_discovery_result <- sceptre_object@discovery_result |>
dplyr::select(response_id,
grna_target,
n_nonzero_trt,
n_nonzero_cntrl,
p_value)
# merge the result_df
pvalue_vec <- result_df |>
merge(sceptre_discovery_result, by = c("response_id")) |>
dplyr::select(p_value) |> dplyr::pull()
names(pvalue_vec) <- gene_list
# print the p-value
print(pvalue_vec[problematic_gene])
# output with only 7 genes (only_problematic_gene <- TRUE)
# ENSG00000065268 ENSG00000102931 ENSG00000106976 ENSG00000108312 ENSG00000135046
# 0.026           0.172           0.024           0.746           0.240
# ENSG00000167491 ENSG00000250067
# 0.114           0.382
# output with full genes (only_problematic_gene <- FALSE)
# ENSG00000065268 ENSG00000102931 ENSG00000106976 ENSG00000108312 ENSG00000135046
# 1.035001e-04    9.416565e-04    6.788717e-04    9.636317e-05    1.885205e-05
# ENSG00000167491 ENSG00000250067
# 1.778355e-03    2.545332e-07
nc_data[, problematic_gene]
# This is a Rscript plotting the simulation results
distribution_list <- c("gaussian", "Bernoulli")
# This is a Rscript plotting the simulation results
distribution_list <- c("gaussian", "Bernoulli")
distribution <- "gaussian"
# load the results
result_rds <- readRDS("%s/results.rds", distribution)
setwd("~/Documents/Projects/AdaInf/AdaReg-project/code/formal-simulation")
# load the results
result_rds <- readRDS("%s/results.rds", distribution)
distribution
# load the results
result_rds <- readRDS(sprintf("%s/results.rds", distribution))
result_rds
result_rds$results
5 * 2000 * 6
result_rds$results$output
result_rds$results$output[[1]]
# This is a Rscript plotting the simulation results
library(tidyr)
library(dplyr)
library(ggplot2)
result_rds$results |>
unnest(output) |>
mutate(
p_value = sapply(output, function(x) unlist(x)),
sideness = names(p_value)
)
# create parameter grid
parameter_grid <- data.frame(
signal = seq(0, 0.5, length.out = 5)
) |> mutate(grid_id = 1:n())
# extract the output
output_rds <- result_rds$results |>
unnest(output) |>
mutate(
p_value = sapply(output, function(x) unlist(x)),
sideness = names(p_value)
) |>
dplyr::select(-output) |>
merge(parameter_grid, by = "grid_id")
output_rds
# extract the output
output_rds <- result_rds$results |>
unnest(output) |>
mutate(
p_value = sapply(output, function(x) unlist(x)),
sideness = names(p_value)
) |>
dplyr::select(-output) |>
left_join(parameter_grid, by = "grid_id")
output_rds
alpha <- 0.1
result_rds$results |>
unnest(output) |>
mutate(
p_value = sapply(output, function(x) unlist(x)),
sideness = names(p_value)
) |>
dplyr::select(-output) |>
left_join(parameter_grid, by = "grid_id") |>
group_by(method, signal, sideness) |>
summarise(
rejection = mean(p_value <= alpha)
) |>
ungroup()
# extract the output
output_rds <- result_rds$results |>
unnest(output) |>
mutate(
p_value = sapply(output, function(x) unlist(x)),
sideness = names(p_value)
) |>
dplyr::select(-output) |>
left_join(parameter_grid, by = "grid_id") |>
group_by(method, signal, sideness) |>
summarise(
rejection = mean(p_value <= alpha)
) |>
ungroup() |>
filter(method != "IPW_normal")
# extract the output
output_rds <- result_rds$results |>
unnest(output) |>
mutate(
p_value = sapply(output, function(x) unlist(x)),
sideness = names(p_value)
) |>
dplyr::select(-output) |>
left_join(parameter_grid, by = "grid_id") |>
group_by(method, signal, sideness) |>
summarise(
rejection = mean(p_value <= alpha)
) |>
ungroup() |>
filter(method != "IPW_normal") |>
dplyr::mutate(
stat_form = case_when(
method %in% c("Normalized_adaptive", "Normalized_constant") ~ "normalized",
method %in% c("Unnormalized_adaptive", "Unnormalized_constant") ~ "unnormalized",
TRUE ~ "sample-splitting"
),
weighting = if_else(method %in% c("Normalized_adaptive", "Unnormalized_adaptive"),
"adaptive weighting", "constant weighting"))
output_rds |>
ggplot(aes(x = signal, y = rejection, color = stat_form, linetype = weighting)) +
scale_x_continuous() +
scale_y_continuous(breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
geom_point(size = 2) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 0.1), linetype = "dashed", color = "red") +
theme_bw() +
labs(title = "") +
theme(strip.text.x = element_text(margin = margin(0.04, 0, 0.04, 0, "cm"),
size = 14),
legend.position = "none",
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16),
axis.title = element_blank(),   # Remove individual axis titles
axis.text.y = element_text(size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
output_rds
output_rds |>
filter(sideness == "both") |>
ggplot(aes(x = signal, y = rejection, color = stat_form, linetype = weighting)) +
scale_x_continuous() +
scale_y_continuous(breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
geom_point(size = 2) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 0.1), linetype = "dashed", color = "red") +
theme_bw() +
labs(title = "") +
theme(strip.text.x = element_text(margin = margin(0.04, 0, 0.04, 0, "cm"),
size = 14),
legend.position = "none",
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16),
axis.title = element_blank(),   # Remove individual axis titles
axis.text.y = element_text(size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
output_rds |>
filter(sideness == "left") |>
ggplot(aes(x = signal, y = rejection, color = stat_form, linetype = weighting)) +
scale_x_continuous() +
scale_y_continuous(breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
geom_point(size = 2) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 0.1), linetype = "dashed", color = "red") +
theme_bw() +
labs(title = "") +
theme(strip.text.x = element_text(margin = margin(0.04, 0, 0.04, 0, "cm"),
size = 14),
legend.position = "none",
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16),
axis.title = element_blank(),   # Remove individual axis titles
axis.text.y = element_text(size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
output_rds |>
filter(sideness == "left")
setwd("~/Documents/Projects/AdaInf/AdaReg/R")
document()
remove.packages("AdaReg")
check()
